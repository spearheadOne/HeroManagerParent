buildscript {
    dependencies {
        classpath('com.google.cloud.tools:jib-native-image-extension-gradle:0.1.0')
    }
}

plugins {
    id("org.jetbrains.kotlin.jvm") version "$kotlinVersion"
    id("org.jetbrains.kotlin.kapt") version "$kotlinVersion"
    id("org.jetbrains.kotlin.plugin.allopen") version "$kotlinVersion"
    id("com.github.johnrengelman.shadow") version "$shadowVersion"
    id("io.micronaut.application") version "$micronautVersion"
    id("io.micronaut.test-resources") version "$micronautVersion"
    id("io.micronaut.aot") version "$micronautVersion"
    id("com.google.cloud.tools.jib") version "$jibVersion"
}

version = "1.0"
group = "org.abondar.industrial"

repositories {
    mavenCentral()
}

dependencies {
    kapt("io.micronaut:micronaut-http-validation")
    kapt("io.micronaut.openapi:micronaut-openapi")
    kapt("io.micronaut.security:micronaut-security-annotations")
    kapt("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut:micronaut-http-client")

    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.mindrot:jbcrypt:$brcyptVersion")
    implementation("io.projectreactor:reactor-core:$reactorVersion")
    compileOnly("io.micronaut:micronaut-http-client")
    compileOnly("io.micronaut.openapi:micronaut-openapi-annotations")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    runtimeOnly("com.mysql:mysql-connector-j")
    runtimeOnly("org.flywaydb:flyway-mysql")
    runtimeOnly("com.h2database:h2")
    testImplementation("io.micronaut.test:micronaut-test-rest-assured")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation("org.mockito:mockito-core")
    aotPlugins platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    aotPlugins("io.micronaut.security:micronaut-security-aot")
}


application {
    mainClass = "org.abondar.industrial.authservice.AuthServerApplicationKt"
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks {
       dockerfileNative {
           args("-Dmicronaut.environments=docker")
       }

       dockerfile {
           args("-Dmicronaut.environments=docker")
       }

       dockerBuildNative {
           images.add("$imageName:$project.version")
       }

       dockerBuild {
           images.add("$imageName:$project.version")
       }

       jib {
            from {
                image = "ghcr.io/graalvm/native-image-community:21.0.2-ol9"

                platforms {
                    platform {
                        architecture = "$imageArch"
                        os = "linux"
                    }
                }
            }

            to {
                image = "$imageName:$project.version"

                auth {
                    username = "$dockerhubUser"
                    password = "$dockerhubPass"
                }
            }


            pluginExtensions {
                pluginExtension {
                    implementation = "com.google.cloud.tools.jib.gradle.extension.nativeimage.JibNativeImageExtension"
                    properties = [
                            imageName: "authserver"
                    ]
                }
            }

            container {
                environment = ["MICRONAUT_ENVIRONMENTS":"docker"]
                ports = ["8080"]
            }
        }

}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.abondar.industrial.*")
    }
    testResources {
        additionalModules.add("jdbc-mysql")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
        configurationProperties.put("micronaut.security.jwks.enabled", "false")
    }
}



